# Game Registration
# Note: The root folder is equivalent to: plugins/CraftGames/
# Reference: https://en.wikipedia.org/wiki/Path_(computing)
games:
  example: # Title of sample game. Turn on 'install-sample' above to test it!
    layout: Sample/example/layout.yml # Path to layout.yml


# Data-pack Settings
datapack:

  # Define a format version. Use 'auto' to make plugin decide this for you.
  # Reference: https://minecraft.gamepedia.com/Tutorials/Creating_a_resource_pack#pack_format
  format-version: auto

  # Plugin will generate a datapack for internal use.
  # WARNING: Existing datapack is replaced if it overlaps name.
  internal-pack-name: craftgames


# The prefix of generated world's directory name.
# WARNING: Existing world is replaced if its name overlaps with this label.
world-label: game


# Select charset in which to encode resource files (i.e. scripts, kit data, etc.).
# 'default' indicates system-default charset. 'UTF-8' charset is recommended.
# Reference: https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html
file-encoding: UTF-8


# Shall we install the game sample?
install-sample: false


# Invincible duration (in ticks) applied to a respawning player.
spawn-invincible: 60


# Game-Exit Policy
exit-policy:

  # Should player return to the location where he issued /join command?
  record-join-location: true

  # Exit location to use if it isn't be resolved for any reason.
  fallback:
    world: world
    x: 0.0
    y: 0.0
    z: 0.0
    yaw: 0.0
    pitch: 0.0


# Script Control
script:

  # Available engines: Groovy, JSR223
  engine: Groovy

  # Toggle verbose output to log file (for debugging purpose)
  debug: false

  # Select which compiler should be used to interpret scripts.
  # This can be overridden from layout.yml
  # Static compiler performs type validation at once. Trivial bugs are caught at early stage.
  # Dynamic compiler does not perform type validation during compile stage.
  # In general, Dynamic compiler never fail to compile unless syntax error is caught.
  # Available compilers: STATIC, DYNAMIC
  compiler: STATIC


# Performance Optimization
optimization:

  # Limit the number of blocks that can be processed per each schematic.
  schematic-throttle: 10000

  # Set how many particles are generated per block to display area capture.
  particle-resolution: 2

  # Set visibility of artificial particles.
  particle-render-distance: 30

  # Set maximum attempt to calculate safe area before spawning a mob/player
  safezone-calculation:
    mob-throttle: 3
    player-throttle: 10